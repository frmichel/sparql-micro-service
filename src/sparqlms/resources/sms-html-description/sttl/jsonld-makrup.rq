@prefix dcat:    <http://www.w3.org/ns/dcat#>.
@prefix dct:     <http://purl.org/dc/terms/>.
@prefix schema:  <http://schema.org/>.
@prefix sd:      <http://www.w3.org/ns/sparql-service-description#>.
@prefix shacl:   <http://www.w3.org/ns/shacl#>.
@prefix sms:     <http://ns.inria.fr/sparql-micro-service#>.

# This template constructs a graph complying with the schema:Dataset requirements, based on the service description.
# Then, it serializes this graph in JSON-LD that can be embedded into the HTML service description page.
template st:jsonld-markup {

    # JSON-LD transformation
    st:apply-templates-with-graph(st:jsonld-light, ?graph)
    
} WHERE {
    BIND(
        let (?g = 

            CONSTRUCT {
                ?service 
                    a schema:Dataset;
                    schema:identifier ?serviceUrlStr;
                    schema:name ?serviceName;
                    schema:description ?serviceDescription;
                    schema:citation ?citationStr;
                    schema:keywords ?keyword;
                    schema:isBasedOn ?apiUrl;
                    schema:publisher ?pubUri; 
                    schema:license <https://creativecommons.org/licenses/by/4.0/>;
                    
                    schema:distribution ?schemaDistribution;
                    schema:additionalType ?dcatDataset, ?smsService;
                    dcat:distribution ?dcatDistribution.

                ?apiUrl 
                    a schema:CreativeWork;
                    schema:name ?apiName.

                # Dataset publisher information
                ?pubUri
                    a ?pubType;
                    schema:name ?pubName;
                    schema:logo ?pubLogo;
                    schema:contactPoint ?pubContactPointUri.
                    
                # Dataset publisher contact information
                ?pubContactPointUri
                    a ?pubContactPointType;
                    schema:contactType ?pubContactType;
                    schema:name ?pubContactName;
                    schema:email ?pubContactEmail;
                    schema:url ?pubContactUrlStr.

                # Dataset distribution with schema.org vocabulary
                ?schemaDistribution
                    a schema:DataDownload;
                    schema:contentUrl ?serviceUrlStr;
                    schema:name "SPARQL endpoint";
                    schema:description "SPARQL micro-service endpoint";
                    schema:encodingFormat "api/sparql".

                # Dataset distribution with DCAT vocabulary
                ?dcatDistribution
                    a dcat:Distribution;
                    schema:name "SPARQL endpoint";
                    schema:description "SPARQL micro-service endpoint";
                    shacl:shapesGraph ?shapesGraph;
                    dcat:accessUrl ?serviceUrl;
                    dcat:mediaType ?serviceResultFormatStr.
                    
                ?shapesGraph a shacl:ShapesGraph.

            } WHERE {
                # Retrieve the service URI from the URL query string (?param=http://example.org/service)
                BIND(IRI(st:get(st:param)) as ?service)

                ?service 
                    a sd:Service;
                    sd:endpoint ?serviceUrl;
                    schema:name ?serviceName;
                    schema:description ?serviceDescription.
                    
                OPTIONAL { ?service sd:defaultDataset [ sd:defaultGraph [ shacl:shapesGraph ?shapesGraph ]] }

                OPTIONAL { ?service sd:resultFormat ?serviceResultFormat }
                OPTIONAL { ?service schema:keywords ?keyword }
                OPTIONAL { ?service schema:citation ?citation }
                OPTIONAL {  
                    ?service schema:publisher ?pub.
                    ?pub a ?pubType; schema:name ?pubName.
                    OPTIONAL { ?pub schema:logo ?pubLogo }
                    OPTIONAL {  
                        ?pub schema:contactPoint ?pubContactPoint. 
                        ?pubContactPoint a ?pubContactPointType.
                        OPTIONAL { ?pubContactPoint schema:contactType ?pubContactType }
                        OPTIONAL { ?pubContactPoint schema:name ?pubContactName }
                        OPTIONAL { ?pubContactPoint schema:email ?pubContactEmail }
                        OPTIONAL { ?pubContactPoint schema:url ?pubContactUrl }
                    }
                }
                
                OPTIONAL {  ?service dct:source [ schema:name ?apiName ] }
                OPTIONAL {  ?service dct:source [ schema:url ?apiUrl ] }
                
                BIND(IRI(concat(?service, "Publisher")) as ?pubUri)
                BIND(IRI(concat(?service, "PublisherContact")) as ?pubContactPointUri)
                BIND(IRI(concat(?service, "DcatDistribution")) as ?dcatDistribution)
                BIND(IRI(concat(?service, "SchemaDistribution")) as ?schemaDistribution)
                
                # Google's Structured Data Testing Tool (https://search.google.com/structured-data/testing-tool)
                # requires some URLs to be written as simple strings, not as URIs with "field": {"@id": "http://..."}
                # It is unclear whether this is an error in the Structured Data Testing Tool, or it this would
                # indeed hamper the indexing of the JSON-LD content. 
                # So below we convert these URIs to strings.
                BIND(str(dcat:Dataset) as ?dcatDataset)
                BIND(str(sms:Service) as ?smsService)
                BIND(str(?citation) as ?citationStr)
                BIND(str(?serviceUrl) as ?serviceUrlStr)
                BIND(str(?pubContactUrl) as ?pubContactUrlStr)
                BIND(str(?serviceResultFormat) as ?serviceResultFormatStr)
            }

            ) { ?g } 
        as ?graph
    )
}

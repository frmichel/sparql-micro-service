CONSTRUCT {
    ?taxonUri a dwc:Taxon;

        dwc:scientificNameAuthorship ?authorname;
        dwc:scientificName           ?scientificname;
        dwc:scientificNameID         ?id;
        dwc:originalNameUsageID      ?basionymId;
        dwc:acceptedNameUsage        ?refName;

        dwc:genus                    ?genus_name;
        dwc:family                   ?family_name;
        dwc:order                    ?order_name;
        dwc:class                    ?class_name;
        dwc:phylum                   ?phylum_name;
        dwc:kingdom                  ?kingdom_name;

        taxrefp:hasRank              ?rankUri;
        schema:sameAs                ?page;
        .
}
WHERE {
    ?c
        api:RECORD_x0020_NUMBER         ?id;
        api:AUTHORS                     ?author;
        api:NAME_x0020_OF_x0020_FUNGUS  ?scientificname;
        api:INFRASPECIFIC_x0020_RANK    ?rankAbbr.

    OPTIONAL { ?c api:YEAR_x0020_OF_x0020_PUBLICATION     ?year }
    OPTIONAL { ?c api:BASIONYM_x0020_RECORD_x0020_NUMBER     ?basionymId }
    OPTIONAL { ?c api:CURRENT_x0020_NAME ?refName }
    OPTIONAL { ?c api:Genus_x0020_name   ?genus_name }
    OPTIONAL { ?c api:Family_x0020_name  ?family_name }
    OPTIONAL { ?c api:Order_x0020_name   ?order_name }
    OPTIONAL { ?c api:Class_x0020_name   ?class_name }
    OPTIONAL { ?c api:Phylum_x0020_name  ?phylum_name }
    OPTIONAL { ?c api:Kingdom_x0020_name ?kingdom_name }
    OPTIONAL { ?c api:EDITORIAL_x0020_COMMENT ?comment }

    bind (concat(sms:formatAuthorName(?author), if (bound(?year), concat(", ", ?year), "")) AS ?authorname)
    bind (IRI(concat("http://www.indexfungorum.org/Names/NamesRecord.asp?RecordID=", ?id)) AS ?page)
    bind (sms:getRankUriByAbbr(?rankAbbr) AS ?rankUri)
    bind (IRI(concat("http://example.org/ld/indexfungorum/taxon/", ?id)) AS ?taxonUri)

    FILTER (?scientificname = {name})
    filter ( if(bound(?comment), !strstarts(?comment, "DEPRECATED RECORD"), true))
}

function sms:getRankUriByAbbr(?rankAb) {
    IRI(concat("http://taxref.mnhn.fr/lod/taxrank/", sms:getTaxrefRankName(?rankAb)))
}

# Return the TAXREF-LD rank name given the rank abbreviation
function sms:getTaxrefRankName(?rankAb) {
    if      (?rankAb = "regn.")    { return("Kingdom") }
    else if (?rankAb = "subregn.") { return("SubKingdom") }
    else if (?rankAb = "phyl.")    { return("Phylum") }
    else if (?rankAb = "subphyl.") { return("SubPhylum") }
    else if (?rankAb = "class.")   { return("Class") }
    else if (?rankAb = "subclass."){ return("SubClass") }
    else if (?rankAb = "ord.")     { return("Order") }
    else if (?rankAb = "subord.")  { return("SubOrder") }
    else if (?rankAb = "fam.")     { return("Family") }
    else if (?rankAb = "gen.")     { return("Genus") }
    else if (?rankAb = "sp.")      { return("Species") }
    else if (?rankAb = "subsp.")   { return("SubSpecies") }
    else if (?rankAb = "f.")       { return("Forma") }
    else if (?rankAb = "f.sp.")    { return("FormaSpecies") }
    else if (?rankAb = "trib.")    { return("Tribe") }
    # '*' or a single greek or latin letter represents variety
    else if (?rankAb = "var." || ?rankAb = "*" || (STRLEN(?rankAb) = 1 && REGEX(?rankAb, "([α-ω])|([A-Ω])|([a-z])|([A-Z])")))
                                   { return("Varietas") }
}

# Format author name removing extra spaces at beginning and end of the name and after a dot
# " (Bloch, 1782)" => "(Bloch, 1782)";
# "A. Gray" => "A.Gray"
function sms:formatAuthorName(?author) {
    replace(replace(replace(?author, "(\\. )", "."), "(^ *)|( *$)", ""), "\\.&", ". &")
}

CONSTRUCT {
    ?photoUri a schema:Photograph;

        schema:identifier       {photo_id};
        schema:name             ?title;
        schema:contentUrl       ?img;
        schema:thumbnailUrl     ?thumbnail;

        schema:mainEntityOfPage ?pageUrl;
        schema:fileFormat       "image/jpeg";
        schema:dateCreated      ?dateTaken;
        schema:keywords         ?tag;
        schema:description      ?description;

        schema:author           ?ownerUrl.

    ?ownerUrl
            a schema:Person;
            schema:identifier ?owner; schema:name ?ownerName; schema:url ?ownerUrl.
}
WHERE {
    ?photo 
        api:id ?id; api:secret ?secret; api:server ?server; api:farm ?farm;
        api:visibility  [ api:ispublic ?public ];
        api:title       [ api:_content ?title ];
        api:description [ api:_content ?description ];
        api:owner       [ api:nsid ?owner; api:realname ?ownerName ];
        api:urls        [ api:url [ api:type ?photoType; api:_content ?page ] ].

    OPTIONAL { ?photo api:dates [ api:taken ?dateTaken ] }
    OPTIONAL { ?photo api:tags  [ api:tag [ api:_content ?tag ] ] }

    # Dereferenceable URI: customize with the hostname of your Web server
    bind (IRI(concat("http://example.org/ld/flickr/photo/", ?id)) AS ?photoUri)

    bind (IRI(?page) AS ?pageUrl)
    bind (IRI(concat("https://flickr.com/photos/", ?owner)) AS ?ownerUrl)
    bind (IRI(concat("https://farm", ?farm, ".staticflickr.com/", ?server, "/", ?id, "_", ?secret, "_z.jpg")) AS ?img)
    bind (IRI(concat("https://farm", ?farm, ".staticflickr.com/", ?server, "/", ?id, "_", ?secret, "_q.jpg")) AS ?thumbnail)

    filter(?public = "1"^^xsd:integer && ?photoType = "photopage")
}

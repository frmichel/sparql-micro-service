@prefix xsd:     <http://www.w3.org/2001/XMLSchema#>.
@prefix sd:      <http://www.w3.org/ns/sparql-service-description#>.
@prefix frmt:    <http://www.w3.org/ns/formats/>.
@prefix dct:     <http://purl.org/dc/terms/>.
@prefix shacl:   <http://www.w3.org/ns/shacl#>.
@prefix void:    <http://rdfs.org/ns/void#>.
@prefix hydra:   <http://www.w3.org/ns/hydra/core#>.
@prefix schema:  <http://schema.org/>.
@prefix skos:    <http://www.w3.org/2004/02/skos/core#>.
@prefix dwc:     <http://rs.tdwg.org/dwc/terms/>.
@prefix sms:     <http://ns.inria.fr/sparql-micro-service#>.

@base            <http://example.org/sparql-ms/eol/getTraitsByTaxon_sd/>.

# This file is loaded as graph <ServiceDescription>
<>
    a sd:Service, sms:Service;
    sd:endpoint <>;
    sd:supportedLanguage sd:SPARQL11Query;
    sd:feature sd:BasicFederatedQuery, sd:EmptyGraphs;
    sd:resultFormat frmt:SPARQL_Results_XML, frmt:SPARQL_Results_JSON, frmt:SPARQL_Results_CSV, frmt:SPARQL_Results_TSV,
                    frmt:RDF_XML, frmt:Turtle, frmt:JSON-LD, frmt:Trig;
    schema:name "Retrieve life traits of biological species given by their scientific name";
    schema:description '''This service searches the <a href="http://eol.org/traitbank">Encyclopedia of Life traits bank</a> for data related to a given taxon name. It uses the EoL trait bank v3 API that provides a <a href="https://neo4j.com/docs/cypher-manual/current/">Neo4J Cypher</a> interface.''';

    sd:defaultDataset [
        a sd:Dataset, void:Dataset;
        sd:defaultGraph [ a sd:Graph ];
        sd:namedGraph   [ a sd:Graph; sd:name <ServiceDescription> ];
        
        void:vocabulary <http://schema.org/>, <http://rs.tdwg.org/dwc/terms/>, <http://www.w3.org/ns/shacl#>, <http://www.w3.org/ns/hydra/core#>;
        void:sparqlEndpoint <>;
    ];

    schema:keywords "biodiversity", "lifesciences", "fauna", "flora", "species", "trait", "life";
    schema:citation <https://www.mdpi.com/2078-2489/9/12/310>;
    schema:publisher [ a schema:Organization;
        schema:name "Université Côte d'Azur, CNRS, Inria, I3S";
        schema:logo
            "http://univ-cotedazur.fr/fr/university/communication-presse/charte-et-logos/logo/png/uca-logo-large",
            "https://iww.inria.fr/dircom/logoinria-eng.png",
            "http://www.cnrs.fr/themes/custom/cnrs/logo.svg";
        schema:contactPoint [ a schema:ContactPoint;
            schema:contactType "technical support";
            schema:name "Franck Michel";
            schema:email "franck.michel@cnrs.fr";
            schema:url <https://w3id.org/people/franckmichel>;
        ];
    ];

    sms:exampleQuery '''
        prefix dwc: <http://rs.tdwg.org/dwc/terms/>
        prefix dwciri: <http://rs.tdwg.org/dwc/iri/>
        prefix dct:     <http://purl.org/dc/terms/>

        SELECT * WHERE {
            ?taxon a dwc:Taxon;
                dwc:scientificName "Delphinus delphis";
                dct:relation ?measure.

            ?measure 
                a                       dwc:MeasurementOrFact;
                dwc:measurementType     ?measurementType;
                dwc:measurementValue    ?measurementValue.

            OPTIONAL { ?measure dwc:measurementUnit     ?measurementUnit }
            OPTIONAL { ?measure dwciri:measurementUnit  ?measurementUnitUri }
            
            FILTER (?measurementType != 'habitat includes')
        }
        ''';
    
    sms:cacheExpiresAfter "P2592000S"^^xsd:duration;

    # Add provenance information to the graph generated at each invocation?
    sms:addProvenance "false"^^xsd:boolean;

    dct:source [
        a schema:WebAPI; schema:name "EoL API";
        schema:url <https://eol.org/docs/what-is-eol/data-services>;
        schema:potentialAction <APIService>;
    ];
    .

# Web API service being wrapped by this µ-service + parameters binding
<APIService>
    a schema:SearchAction;
    schema:documentation "The taxon scientific name must be provided by property dwc:scientificName in the SPARQL graph pattern.";

    a hydra:IriTemplate;
    
    # Web API query string
    # Cypher query:
    #    MATCH (p:Page)-[:trait]->(t:Trait),
    #          (t)-[:predicate]->(pred:Term)
    #
    #    WHERE p.canonical = "{name}"
    #        AND NOT pred.name CONTAINS 'milk'
    #        AND NOT pred.name CONTAINS 'geographic distribution'
    #    
    #    OPTIONAL MATCH (t)-[:object_term]->(obj:Term)
    #    OPTIONAL MATCH (t)-[:units_term]->(units:Term)
    #
    #    RETURN
    #        { pageId: p.page_id, predName: pred.name, predUri: pred.uri, 
    #          measurement: t.measurement, unitName: units.name, 
    #          unitUri: units.uri, objName: obj.name, objUri: obj.uri }
    #    LIMIT 200
    hydra:template "https://eol.org/service/cypher?query=%20%20%20%20MATCH%20(p%3APage)-%5B%3Atrait%5D-%3E(t%3ATrait)%2C%0A%20%20%20%20%20%20%20%20%20%20(t)-%5B%3Apredicate%5D-%3E(pred%3ATerm)%0A%0A%20%20%20%20WHERE%20p.canonical%20%3D%20%22{name}%22%0A%20%20%20%20%20%20%20%20AND%20NOT%20pred.name%20CONTAINS%20%27milk%27%0A%20%20%20%20%20%20%20%20AND%20NOT%20pred.name%20CONTAINS%20%27geographic%20distribution%27%0A%20%20%20%20%0A%20%20%20%20OPTIONAL%20MATCH%20(t)-%5B%3Aobject_term%5D-%3E(obj%3ATerm)%0A%20%20%20%20OPTIONAL%20MATCH%20(t)-%5B%3Aunits_term%5D-%3E(units%3ATerm)%0A%0A%20%20%20%20RETURN%0A%20%20%20%20%20%20%20%20%7B%20pageId%3A%20p.page_id%2C%20predName%3A%20pred.name%2C%20predUri%3A%20pred.uri%2C%20measurement%3A%20t.measurement%2C%20unitName%3A%20units.name%2C%20unitUri%3A%20units.uri%2C%20objName%3A%20obj.name%2C%20objUri%3A%20obj.uri%20%7D%0A%20%20%20%20LIMIT%20200";

    hydra:mapping [
        hydra:variable      "name";
        schema:description  "The taxon scientific name without authorship nor date information.";
        hydra:required      "true"^^xsd:boolean;
        skos:example        "Delphinus delphis";
        hydra:property      dwc:scientificName;
    ].
